if ($#ARGV != 0)
  {
    print "Usage: $0 ...something\n";
    exit(1);
  }

$infile = $ARGV[0];
$outfile = "EdgeData.java";
open(IN, "$infile") || die "cannot open IN\n";
open(OUT, ">$outfile") || die "cannot open OUT\n";

%edgeHash =
 (
   "1168-114", 1,
   "114-1168", 0,
   "114-876", 1,
   "876-114", 0,
   "876-116", 1,
   "116-876", 0,
   "116-635", 1,
   "635-116", 0,
   "635-1560", 1,
   "1560-635", 0,
   "1560-594", 1,
   "594-1560", 0,
   "594-815", 1,
   "815-594", 0,
   "815-1327", 1,
   "1327-815", 0,
   "1327-1361", 1,
   "1361-1327", 0,
   "1361-1517", 1,
   "1517-1361", 0,
   "1517-788", 1,
   "788-1517", 0 
 );

@line = <IN>;
close (IN);

$count = -1;
$newEdge = 0;
$edgeSrcId = -1;
$edgeDstId = -1;
$srcName = "?";
$dstName = "?";
$edgeLabel = "?";

# I know I should be using here documents for long runs of text but I'm too
# lazy to look up the Perl syntax right now. 

print OUT "/*\n";
print OUT " * \$Header: /zpool01/javanet/scm/svn/tmp/cvs2svn/lg3d-incubator/src/classes/org/jdesktop/lg3d/apps/kwebdemo1/tools/create_EdgeData.pl,v 1.2 2005-06-24 19:57:15 paulby Exp $\n";
print OUT " * \$Date: 2005-06-24 19:57:15 $\n";
print OUT " *\n";
print OUT " * Joint Copyright (c) 2005 by\n";
print OUT " *   James A. Zaun, Consultant,\n";
print OUT " *   The Burke Institute,\n";
print OUT " *   Sun Microsystems, Inc.\n";
print OUT " * ALL RIGHTS RESERVED.\n";
print OUT " *\n";
print OUT " * The contents of this file are subject to the GNU General Public\n";
print OUT " * License, Version 2 (the \"License\"); you may not use this file\n";
print OUT " * except in compliance with the License. A copy of the License is\n";
print OUT " * available at http://www.opensource.org/licenses/gpl-license.php.\n";
print OUT " */\n";
print OUT "\n";
print OUT "package org.jdesktop.lg3d.apps.kwebdemo1.singletons;\n";
print OUT "\n";
print OUT "/*\n";
print OUT " * I prefer to explicitly show each class import rather use the '*' wildcard.\n";
print OUT " * While it is more typing, the reader can see exactly where each class is\n";
print OUT " * coming from, and it avoids software version skew problems were a class name\n";
print OUT " * may be added to a package in the future that is already in use by another\n";
print OUT " * package thus causing a naming conflict when using wildcards.  -jim zaun  \n";
print OUT " */\n";
print OUT "import java.util.Hashtable;\n";
print OUT "import java.util.Enumeration;\n";
print OUT "import java.lang.Integer;\n";
print OUT "\n";
print OUT "import org.jdesktop.lg3d.apps.kwebdemo1.edges.*;\n";
print OUT "\n";
print OUT "\n";
print OUT "/**\n";
print OUT " * James Burke's Knowledge Web graph edge data.\n";
print OUT " * \n";
print OUT " * <p style=\"color: red; font-weight: bold\">Note: This class is autogenerated\n";
print OUT " * from a Perl 5.8 script, <code>create_EdgeData.pl</code> located in the\n";
print OUT " * <code>tools</code> subdirectory.  DO NOT EDIT THIS CODE DIRECTLY.</p>\n";
print OUT " * \n";
print OUT " * <p>This is only a small portion of the complete KWeb graph for\n";
print OUT " * the purposes of this demo only.  The full dataset is copyrighted under\n";
print OUT " * a different copyright agreement. Only this portion is used by permission of\n";
print OUT " * the Burke Institute and put under the GNU General Public License.</p>\n";
print OUT " * \n";
print OUT " * <p>This class is normally used in conjunction with the\n";
print OUT " * {\@link NodeData NodeData} class which contains the graph node details\n";
print OUT " * that the edges in this Class create associations between.</p>\n";
print OUT " *\n";
print OUT " * \@see org.jdesktop.lg3d.apps.kwebdemo1.edges.BasicEdge\n";
print OUT " * \@see org.jdesktop.lg3d.apps.kwebdemo1.edges.DisplayedEdge\n";
print OUT " * \@see org.jdesktop.lg3d.apps.kwebdemo1.edges.JourneyEdge\n";
print OUT " *\n";
print OUT " * \@author Jim Zaun &lt;jz-lg\@zaun.com&gt; (a.k.a. &lt;zaun\@acm.org&gt;)\n";
print OUT " * \@version \$Revision: 1.2 $\n";
print OUT " * \@since JDK 1.5.0, Java3D 1.4.0, lg3d-{core,demo,incubator} 0.7.0\n";
print OUT " */\n";
print OUT "public class EdgeData\n";
print OUT "{\n";
print OUT "  static private EdgeData edgeData = null;\n";
print OUT "  private Hashtable<String,BasicEdge> edgeTable =\n";
print OUT "    new Hashtable<String,BasicEdge>(1023);\n";
print OUT "\n";
print OUT "  /*\n";
print OUT "   * The contructor is hidden so the class can only be invoked by\n";
print OUT "   * getInstance().\n";
print OUT "   */\n";
print OUT "  private EdgeData()\n";
print OUT "  {\n";
print OUT "    BasicEdge edge = null;\n";

foreach $line (@line)
  {
    chomp($line);
    # chop($line); # get rid of the CR too -- ONLY CYGWIN
    if ($line =~ /^\s*edge\s+\[/)
      {
        $count++;
        $newEdge = 1;
      }
    if (($line =~ /^\s*source\s+\d+/) && $newEdge)
      {
        ($edgeSrcId) = ($line =~ /^\s*source\s+(\d+)/);
      }
    if (($line =~ /^\s*target\s+\d+/) && $newEdge)
      {
        ($edgeDstId) = ($line =~ /^\s*target\s+(\d+)/);
      }
    if (($line =~ /^\s*comment\s+".*"/) && $newEdge)
      {
        if ($edgeSrcId >= 0 && $edgeDstId == -1)
         { ($srcName) = ($line =~ /^\s*comment\s+(".*")/);}
        if ($edgeSrcId >= 0 && $edgeDstId >= 0)
         { ($dstName) = ($line =~ /^\s*comment\s+(".*")/);}
      }
    if (($line =~ /^\s*label\s+".*"/) && $newEdge)
      {
        ($edgeLabel) = ($line =~ /^\s*label\s+(".*")/);
      }
    if (($line =~ /^\s*\]/) && $newEdge)
      {
        if ($srcName eq '"Mozart%2C+Wolfgang+Amadeus"' && $dstName eq '"Beaumarchais%2C+Caron+de"')
          { print OUT "    edge = new JourneyEdgeA($edgeSrcId, $edgeDstId,\n"; }
        elsif ($srcName eq '"Beaumarchais%2C+Caron+de"' && $dstName eq '"Jefferson%2C+Pres.+Thomas"')
          { print OUT "    edge = new JourneyEdgeB($edgeSrcId, $edgeDstId,\n"; }
        elsif ($srcName eq '"Jefferson%2C+Pres.+Thomas"' && $dstName eq '"Beccaria%2C+Cesare"')
          { print OUT "    edge = new JourneyEdgeC($edgeSrcId, $edgeDstId,\n"; }
        elsif ($srcName eq '"Beccaria%2C+Cesare"' && $dstName eq '"Gall%2C+Franz+Josef"')
          { print OUT "    edge = new JourneyEdgeD($edgeSrcId, $edgeDstId,\n"; }
        elsif ($srcName eq '"Gall%2C+Franz+Josef"' && $dstName eq '"Spurzheim%2C+Johann"')
          { print OUT "    edge = new JourneyEdgeE($edgeSrcId, $edgeDstId,\n"; }
        elsif ($srcName eq '"Spurzheim%2C+Johann"' && $dstName eq '"Follen%2C+Karl"')
          { print OUT "    edge = new JourneyEdgeF($edgeSrcId, $edgeDstId,\n"; }
        elsif ($srcName eq '"Follen%2C+Karl"' && $dstName eq '"Hoffmann%2C+Ernst+Theodor+Amadeus"')
          { print OUT "    edge = new JourneyEdgeG($edgeSrcId, $edgeDstId,\n"; }
        elsif ($srcName eq '"Hoffmann%2C+Ernst+Theodor+Amadeus"' && $dstName eq '"Poe%2C+Edgar+Allan"')
          { print OUT "    edge = new JourneyEdgeH($edgeSrcId, $edgeDstId,\n"; }
        elsif ($srcName eq '"Poe%2C+Edgar+Allan"' && $dstName eq '"Rachmaninov%2C+Sergey"')
          { print OUT "    edge = new JourneyEdgeI($edgeSrcId, $edgeDstId,\n"; }
        elsif ($srcName eq '"Rachmaninov%2C+Sergey"' && $dstName eq '"Sikorsky%2C+Igor+Ivanovich"')
          { print OUT "    edge = new JourneyEdgeJ($edgeSrcId, $edgeDstId,\n"; }
        elsif ($srcName eq '"Sikorsky%2C+Igor+Ivanovich"' && $dstName eq '"helicopter"')
          { print OUT "    edge = new JourneyEdgeK($edgeSrcId, $edgeDstId,\n"; }
        else
          {
            $key = "$edgeSrcId" . "-" . "$edgeDstId";
            if (! exists $edgeHash{$key})
              {
                $edgeHash{$key} = 1;
                $revkey = "$edgeDstId" . "-" . "$edgeSrcId";
                $edgeHash{$revkey} = 0;
              }
            if ($edgeHash{$key})
              {
                print OUT "    edge = new DisplayedEdge($edgeSrcId, $edgeDstId,\n";
              }
            else
              {
                print OUT "    edge = new BasicEdge($edgeSrcId, $edgeDstId,\n";
              }
          }
        print OUT "                       $srcName,\n";
        print OUT "                       $edgeLabel,\n";
        print OUT "                       $dstName);\n";
        print OUT "    edgeTable.put(\"$key\", edge);\n";  
        $newEdge = 0;
        $edgeSrcId = -1;
        $edgeDstId = -1;
        $srcName = "?";
        $dstName = "?";
        $edgeLabel = "?";
      }
  }
print OUT "  }\n";
print OUT "\n";
print OUT "  /**\n";
print OUT "   * Get an instance of this class.\n";
print OUT "   * Implements the singleton design pattern.\n";
print OUT "   * \@return reference to only instance of this class\n";
print OUT "   */\n";
print OUT "  static public EdgeData getInstance()\n";
print OUT "  {\n";
print OUT "    if (edgeData == null) edgeData = new EdgeData();\n";
print OUT "    return edgeData;\n";
print OUT "  }\n";
print OUT "\n";
print OUT "  /**\n";
print OUT "   * Get a directed edge object connecting a pair of nodes.\n";
print OUT "   * \n";
print OUT "   * Because edges are directed there can be, and often are, two edges\n";
print OUT "   * connecting a pair of nodes.  Only the edge specified in the\n";
print OUT "   * source to destination direction is returned, (if any). The edge\n";
print OUT "   * for the reverse direction (if any) can be obtained by transposing\n";
print OUT "   * the two parameters. (Only strings containing numerics have any\n";
print OUT "   * hope of success.)\n";
print OUT "   * \n";
print OUT "   * While the Edge object returned is a BasicEdge, the actual object is\n";
print OUT "   * likely to be a derived class object.  See the Edge class references in\n";
print OUT "   * this class declaration (above). \n";
print OUT "   * \n";
print OUT "   * \@param srcNodeId Node ID of the edge source node.\n";
print OUT "   * \@param dstNodeId Node ID of the edge destination node\n";
print OUT "   * \@return an Edge Object or <code>null</code> if none\n";
print OUT "   */\n";
print OUT "  public BasicEdge getEdge(String srcNodeId, String dstNodeId)\n";
print OUT "  {\n";
print OUT "    try\n";
print OUT "      {\n";
print OUT "        Integer.parseInt(srcNodeId);\n";
print OUT "        Integer.parseInt(dstNodeId);\n";
print OUT "      }\n";
print OUT "    catch (NumberFormatException e)\n";
print OUT "      {\n";
print OUT "        return null;\n";
print OUT "      }\n";
print OUT "    String key = srcNodeId + \"-\" + dstNodeId;\n";
print OUT "    return edgeTable.get(key);\n";
print OUT "  }\n";
print OUT "\n";
print OUT "  /**\n";
print OUT "   * Get a directed edge object connecting a pair of nodes.\n";
print OUT "   * \n";
print OUT "   * Because edges are directed there can be, and often are, two edges\n";
print OUT "   * connecting a pair of nodes.  Only the edge specified in the\n";
print OUT "   * source to destination direction is returned, (if any). The edge\n";
print OUT "   * for the reverse direction (if any) can be obtained by transposing\n";
print OUT "   * the two parameters.\n";
print OUT "   * \n";
print OUT "   * While the Edge object returned is a BasicEdge, the actual object is\n";
print OUT "   * likely to be a derived class object.  See the Edge class references in\n";
print OUT "   * this class declaration (above). \n";
print OUT "   * \n";
print OUT "   * \@param srcNodeId Node ID of the edge source node.\n";
print OUT "   * \@param dstNodeId Node ID of the edge destination node\n";
print OUT "   * \@return an Edge Object or <code>null</code> if none\n";
print OUT "   */\n";
print OUT "  public BasicEdge getEdge(int srcNodeId, int dstNodeId)\n";
print OUT "  {\n";
print OUT "    String key = Integer.toString(srcNodeId) + \"-\" + Integer.toString(dstNodeId);\n";
print OUT "    return edgeTable.get(key);\n";
print OUT "  }\n";
print OUT "\n";
print OUT "  /**\n";
print OUT "   * Get an enumeration of all the Edge objects.\n";
print OUT "   * \n";
print OUT "   * Use the Enumeration methods on the returned object to fetch each Edge\n";
print OUT "   * object sequentially.\n";
print OUT "   * \n";
print OUT "   * \@return an Enumeration object for retreiving Edge objects\n";
print OUT "   */\n";
print OUT "  public Enumeration<BasicEdge> elements()\n";
print OUT "  {\n";
print OUT "    return edgeTable.elements();\n";
print OUT "  }\n";
print OUT "}\n";
close (OUT);

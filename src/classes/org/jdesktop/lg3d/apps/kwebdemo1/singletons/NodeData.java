/*
 * $Header: /zpool01/javanet/scm/svn/tmp/cvs2svn/lg3d-incubator/src/classes/org/jdesktop/lg3d/apps/kwebdemo1/singletons/NodeData.java,v 1.2 2005-06-24 19:57:14 paulby Exp $
 * $Date: 2005-06-24 19:57:14 $
 *
 * Joint Copyright (c) 2005 by
 *   James A. Zaun, Consultant,
 *   The Burke Institute,
 *   Sun Microsystems, Inc.
 * ALL RIGHTS RESERVED.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 */

package org.jdesktop.lg3d.apps.kwebdemo1.singletons;

/*
 * I prefer to explicitly show each class import rather use the '*' wildcard.
 * While it is more typing, the reader can see exactly where each class is
 * coming from, and it avoids software version skew problems were a class name
 * may be added to a package in the future that is already in use by another
 * package thus causing a naming conflict when using wildcards.  -jim zaun  
 */
import java.util.Hashtable;
import java.util.Enumeration;
import java.lang.Integer;

import org.jdesktop.lg3d.apps.kwebdemo1.nodes.*;

/**
 * James Burke's Knowledge Web graph node data.
 * 
 * <p style="color: red; font-weight: bold">Note: This class is autogenerated
 * from a Perl 5.8 script, <code>create_NodeData.pl</code> located in the
 * <code>tools</code> subdirectory.  DO NOT EDIT THIS CODE DIRECTLY.</p>
 * 
 * <p>This is only a small portion of the complete KWeb graph for
 * the purposes of this demo only.  The full dataset is copyrighted under
 * a different copyright agreement. Only this portion is used by permission of
 * the Burke Institute and put under the GNU General Public License.</p>
 * 
 * <p>This class is normally used in conjunction with the
 * {@link EdgeData EdgeData} class which contains the graph edge details
 * that create associations between the Node classes.</p>
 *
 * @see org.jdesktop.lg3d.apps.kwebdemo1.nodes.BasicNode
 * @see org.jdesktop.lg3d.apps.kwebdemo1.nodes.JourneyNode
 * @see org.jdesktop.lg3d.apps.kwebdemo1.nodes.JourneyNodeA
 *
 * @author Jim Zaun &lt;jz-lg@zaun.com&gt; (a.k.a. &lt;zaun@acm.org&gt;)
 * @version $Revision: 1.1.2.1 n * @since JDK 1.5.0, Java3D 1.4.0, lg3d-{core,demo,incubator} 0.7.0
 */
public class NodeData
{
  static private NodeData nodeData = null;
  private Hashtable<String,BasicNode> nodeTable =
    new Hashtable<String,BasicNode>(1023);
  private String nodeFontName = "SansSerif";
  private boolean fontNameSet = false;
  
  /**
   * Horrible hack to meet the JavaOne 2005 deadline.  This needs to be
   * rethought.  Used <code>KWebMouseEnteredEventAdapter</code> to relate
   * Java3D Shape3D picks to KWeb Node Ids.
   */
  public Hashtable<Integer,Integer> nodePickTable =
    new Hashtable<Integer,Integer>(1023);

  /*
   * The contructor is hidden so the class can only be invoked by
   * getInstance().
   */
  private NodeData()
  {
    BasicNode node = null;
    node = new BasicNode(this, 95, "Bardeen%2C+John",
                       20, -2.94275039394926, 1.31433391382454,
                       "John Bardeen, co-inventor of the transistor");
    nodeTable.put("95", node);
    node = new JourneyNodeB(this, 114, "Beaumarchais%2C+Caron+de",
                       18, -1.24923560411801, 0.598252507277343,
                       "Caron de Beaumarchais, French playwright and spy");
    nodeTable.put("114", node);
    node = new JourneyNodeD(this, 116, "Beccaria%2C+Cesare",
                       18, 2.49540324670108, 2.96652709618198,
                       "Cesare Beccaria, early Italian criminologist");
    nodeTable.put("116", node);
    node = new BasicNode(this, 126, "Bell%2C+Alexander+Graham",
                       19, -2.09637649423061, 2.64736321850149,
                       "Alexander Graham Bell, prolific inventor");
    nodeTable.put("126", node);
    node = new BasicNode(this, 182, "Bohr%2C+Niels+Henrik+David",
                       20, 2.34488138188931, 0.972543819522657,
                       "Niels Bohr, who discovered the structure of the atom");
    nodeTable.put("182", node);
    node = new BasicNode(this, 197, "Born%2C+Max",
                       20, 1.05211907289448, 0.25243571340725,
                       "Max Born, major figure in quantum physics");
    nodeTable.put("197", node);
    node = new BasicNode(this, 209, "Bragg%2C+Sir+William+Henry",
                       20, -1.66187643606059, 0.0143810698864757,
                       "William Henry Bragg,  X-ray diffraction pioneer");
    nodeTable.put("209", node);
    node = new BasicNode(this, 217, "Brattain%2C+Walter+Houser",
                       20, 0.501995212837207, 1.72496139598301,
                       "Walter Brattain, co-inventor of the transistor");
    nodeTable.put("217", node);
    node = new BasicNode(this, 218, "Braun%2C+Karl+Ferdinand",
                       19, 0.571983086284716, 0.827199139870019,
                       "Karl Braun, early electronics pioneer");
    nodeTable.put("218", node);
    node = new BasicNode(this, 227, "Brewster%2C+Sir+David",
                       19, 2.09829397023589, 3.10180502691409,
                       "David Brewster, physicist and inventor of the kaleidoscope");
    nodeTable.put("227", node);
    node = new BasicNode(this, 235, "Broglie%2C+Louis%2C+Duke+de",
                       20, -0.170463615033932, 1.86091044330981,
                       "Louis de Broglie, pioneer in quantum physics");
    nodeTable.put("235", node);
    node = new BasicNode(this, 254, "Buchan%2C+John",
                       20, -2.85799795541831, 1.17656326431211,
                       "John Buchan, diplomat and spy-novelist");
    nodeTable.put("254", node);
    node = new BasicNode(this, 275, "Byron%2C+George+Gordon",
                       19, -0.0598252507073209, 1.43714825065503,
                       "Byron, one of the greatest Romantic poets and lovers");
    nodeTable.put("275", node);
    node = new BasicNode(this, 309, "Cassini+family",
                       18, -0.87609477746362, 1.88133156254861,
                       "The Cassini's,  a great family of astronomers");
    nodeTable.put("309", node);
    node = new BasicNode(this, 379, "Communism",
                       0, 2.20528913019126, 0.439773117128393,
                       "Communism, planned economic and social system");
    nodeTable.put("379", node);
    node = new BasicNode(this, 428, "Curie%2C+Marie",
                       20, -1.16486666078403, 2.39626973828364,
                       "Marie Curie, discoverer of radioactivity");
    nodeTable.put("428", node);
    node = new BasicNode(this, 444, "Darwin%2C+Charles+Robert",
                       19, 0.67207533269458, 1.58738249406907,
                       "Charles Darwin, of evolution theory fame");
    nodeTable.put("444", node);
    node = new BasicNode(this, 445, "Darwin%2C+Erasmus",
                       18, 0.921538958325291, 2.83633047680977,
                       "Erasmus Darwin, scientist and father of Charles Darwin");
    nodeTable.put("445", node);
    node = new BasicNode(this, 449, "Davy%2C+Sir+Humphry",
                       19, -2.34967507183105, 1.14492491056187,
                       "Humphry Davy, great English chemist");
    nodeTable.put("449", node);
    node = new BasicNode(this, 450, "Debussy%2C+Achille-Claude",
                       19, -0.765072917940037, 0.243327702479151,
                       "Claude Debussy, major French Romantic composer");
    nodeTable.put("450", node);
    node = new BasicNode(this, 460, "Descartes%2C+Rene",
                       17, -0.779262240228023, 1.72323566759663,
                       "Rene Descartes, philosopher who invented reductionism");
    nodeTable.put("460", node);
    node = new BasicNode(this, 464, "Diaghilev%2C+Sergei+Pavlovich",
                       20, -0.978679742653804, 2.73038992864607,
                       "Sergi Diaghile, revolutionized 20th cent. ballet");
    nodeTable.put("464", node);
    node = new BasicNode(this, 516, "Eastman%2C+George",
                       20, 1.22411666873672, 2.17077456246372,
                       "George Eastman,  who developed the Kodak camera");
    nodeTable.put("516", node);
    node = new BasicNode(this, 518, "Edison%2C+Thomas+Alva",
                       20, -1.48144194588496, 0.0551274345648205,
                       "Thomas Edison, most famous American  inventor");
    nodeTable.put("518", node);
    node = new BasicNode(this, 524, "Einstein%2C+Albert",
                       20, 2.56577461534556, 1.54807423637937,
                       "Albert Einstein, greatest 20th cent. scientist");
    nodeTable.put("524", node);
    node = new BasicNode(this, 529, "electric+motor",
                       0, 1.80971383451397, 1.34597226757478,
                       "Electric motor, coverts electric power into mechanical power");
    nodeTable.put("529", node);
    node = new BasicNode(this, 531, "Electrolysis",
                       0, -2.36328915132358, 0.00805339913642702,
                       "Electrolysis, separation of elements by electricity");
    nodeTable.put("531", node);
    node = new BasicNode(this, 532, "Electromagnetic+radiation",
                       0, -1.431779317877, 1.15029384331948,
                       "Electromagnetic radiation, basis of radio, heat and light");
    nodeTable.put("532", node);
    node = new BasicNode(this, 533, "electromagnetism",
                       0, 2.42867508242783, 0.446867778272388,
                       "Electromagnetism, fundamental force of electrons");
    nodeTable.put("533", node);
    node = new BasicNode(this, 545, "Engels%2C+Friedrich",
                       19, -0.464412683513473, 2.23395539616497,
                       "Friedrich Engels, co-founder of Communism");
    nodeTable.put("545", node);
    node = new BasicNode(this, 553, "Eugenics",
                       0, 0.711767085581251, 0.384645682563575,
                       "Eugenics, philosophy of a superior human race");
    nodeTable.put("553", node);
    node = new BasicNode(this, 559, "Evolution%2C+theory+of",
                       0, 1.65017983257334, 3.043417883175,
                       "Evolution, theory of evolving life");
    nodeTable.put("559", node);
    node = new BasicNode(this, 565, "Faraday%2C+Michael",
                       19, 0.117924773069092, 2.64477462592192,
                       "Michael Faraday,  English discoverer of induction");
    nodeTable.put("565", node);
    node = new JourneyNodeG(this, 594, "Follen%2C+Karl",
                       19, 0.4642209359354, 1.77510339298718,
                       "Adolf Follen, who introduced gymnastics to the US");
    nodeTable.put("594", node);
    node = new BasicNode(this, 609, "Franklin%2C+Benjamin",
                       18, -0.930167600236764, 0.740337477755713,
                       "Benjamin Franklin,  famous American thinker");
    nodeTable.put("609", node);
    node = new BasicNode(this, 619, "Freud%2C+Sigmund",
                       20, -2.53317752358247, 0.407176025385718,
                       "Sigmund Freud,  founder of psychoanalysis");
    nodeTable.put("619", node);
    node = new BasicNode(this, 632, "Galilei%2C+Galileo",
                       17, 0.980021975863623, 2.11718110868679,
                       "Galileo, genius astronomer");
    nodeTable.put("632", node);
    node = new JourneyNodeE(this, 635, "Gall%2C+Franz+Josef",
                       19, 1.29774774655547, 2.88465087162832,
                       "Franz Joseph Gall, originator of phrenology");
    nodeTable.put("635", node);
    node = new BasicNode(this, 637, "Galton%2C+Sir+Francis",
                       20, -0.882038953016697, 2.4150610029353,
                       "Francis Galton, founder of eugenics");
    nodeTable.put("637", node);
    node = new BasicNode(this, 638, "Galvani%2C+Luigi",
                       18, 1.50464340532222, 1.56600263683784,
                       "Luigi Galvani, early electricity researcher");
    nodeTable.put("638", node);
    node = new BasicNode(this, 684, "Goddard%2C+Robert+Hutchings",
                       20, 2.6100683105959, 1.17100258395601,
                       "Robert Goddard, pioneer of spaceflight");
    nodeTable.put("684", node);
    node = new BasicNode(this, 689, "Goethe%2C+Johann+Wolfgang+von",
                       19, -1.35450503568701, 2.73968968717266,
                       "J.W. Goethe,  major European cultural figure");
    nodeTable.put("689", node);
    node = new BasicNode(this, 744, "gyroscope",
                       0, 2.43135954880664, 0.229521875388135,
                       "Gyroscope, basis of inertial navigation systems");
    nodeTable.put("744", node);
    node = new BasicNode(this, 748, "Hales%2C+Stephen",
                       17, 0.14572817484961, 1.23217006787314,
                       "Stephen Hales, British scientist concerned with public good");
    nodeTable.put("748", node);
    node = new BasicNode(this, 759, "Hamilton%2C+Sir+William",
                       19, -2.51016781176411, 2.16214592053184,
                       "Sir William Hamilton, diplomat, vulcanologist and antiques collector");
    nodeTable.put("759", node);
    node = new BasicNode(this, 787, "Heisenberg%2C+Werner+Karl",
                       20, -1.49984971533964, 2.63758409097869,
                       "Werner Heisenberg, of the 'Uncertainty Principle'");
    nodeTable.put("787", node);
    node = new JourneyNodeL(this, 788, "helicopter",
                       0, 0.0719053494323732, 2.70249065306631,
                       "The helicopter");
    nodeTable.put("788", node);
    node = new BasicNode(this, 789, "Helmholtz%2C+Hermann+von",
                       19, -1.82543713756943, 1.07810087248938,
                       "Hermann von Helmholtz, 19th century physics biggie");
    nodeTable.put("789", node);
    node = new BasicNode(this, 802, "Herschel%2C+Sir+William",
                       19, -2.50000518904433, 1.05374892748162,
                       "William Herschel, discoverer of Uranus");
    nodeTable.put("802", node);
    node = new BasicNode(this, 803, "Hertz%2C+Heinrich+Rudolf",
                       19, -0.707165143197165, 0.856632396237671,
                       "Heinrich Hertz,  discoverer of electromagnetic radiation");
    nodeTable.put("803", node);
    node = new BasicNode(this, 804, "Herzl%2C+Theodor",
                       20, -2.02964832995737, 0.639382367152661,
                       "Theodor Hertzl, founder of Zionism");
    nodeTable.put("804", node);
    node = new JourneyNodeH(this, 815, "Hoffmann%2C+Ernst+Theodor+Amadeus",
                       19, -0.706589900401704, 2.83498824362036,
                       "ETA Hoffmann, writer of horror stories");
    nodeTable.put("815", node);
    node = new BasicNode(this, 855, "Hypnosis",
                       0, 1.9270633647876, 3.05358050589478,
                       "Hypnosis, mesmerism into a trance state");
    nodeTable.put("855", node);
    node = new BasicNode(this, 858, "Induction",
                       0, 0.977721004681788, 2.08074906497439,
                       "Induction, fundamental principle of electric motors");
    nodeTable.put("858", node);
    node = new BasicNode(this, 871, "James%2C+Henry",
                       20, -1.13878898738989, 1.80549538734727,
                       "Henry James, major American novelist");
    nodeTable.put("871", node);
    node = new JourneyNodeC(this, 876, "Jefferson%2C+Pres.+Thomas",
                       19, 2.11689348728906, 0.0264611685911107,
                       "Thomas Jefferson, President of the United States");
    nodeTable.put("876", node);
    node = new BasicNode(this, 899, "kaleidoscope",
                       0, 1.42200019037461, 2.10260829120183,
                       "Kaleidoscope, repeating pattern optical device");
    nodeTable.put("899", node);
    node = new BasicNode(this, 959, "Langevin%2C+Paul",
                       20, 2.03866046710664, 2.61745059313762,
                       "Paul Langevin, inventor of sonar");
    nodeTable.put("959", node);
    node = new BasicNode(this, 963, "Laser",
                       0, -0.181201480549167, 1.54011671104219,
                       "Laser, device producing phase-aligned light");
    nodeTable.put("963", node);
    node = new BasicNode(this, 970, "Lawrence%2C+Thomas+Edward",
                       20, -2.00146143297988, 2.39310590290862,
                       "Lawrence of Arabia");
    nodeTable.put("970", node);
    node = new BasicNode(this, 981, "Leibniz%2C+Gottfried+Wilhelm",
                       17, -2.36137167533872, 1.67721624395991,
                       "G W Leibniz, co-inventor (with Newton) of calculus");
    nodeTable.put("981", node);
    node = new BasicNode(this, 983, "Lenin%2C+Vladimir+Ilich",
                       20, -2.26894933286831, 1.80319441616543,
                       "Lenin, leader of the Bolshevik Revolution");
    nodeTable.put("983", node);
    node = new BasicNode(this, 986, "Lesseps%2C+Ferdinand%2C+Vicomte+de",
                       19, -1.83387403190283, 1.76963858643032,
                       "Ferdinand De Lesseps, who built the Suez Canal");
    nodeTable.put("986", node);
    node = new BasicNode(this, 991, "Light+bulb",
                       0, -1.21874773595869, 2.20135830442229,
                       "Light bulb, revolutionized indoor illumination");
    nodeTable.put("991", node);
    node = new BasicNode(this, 1001, "Liquid-fuel+rocket",
                       0, 1.6451943950127, 1.7453825152218,
                       "Liquid-fuel rocket, enabled spaceflight");
    nodeTable.put("1001", node);
    node = new BasicNode(this, 1004, "Liszt%2C+Franz",
                       19, -1.52170894156709, 2.33059618580207,
                       "Franz Liszt, piano virtuoso and Romantic composer");
    nodeTable.put("1004", node);
    node = new BasicNode(this, 1038, "Mach%2C+Ernst",
                       19, 1.68757061427817, 1.94058157048088,
                       "Ernst Mach, discoverer of shock waves");
    nodeTable.put("1038", node);
    node = new BasicNode(this, 1039, "Mach+number",
                       0, 0.863247688385449, 1.45104995154529,
                       "Mach number, ratio of speed to sound");
    nodeTable.put("1039", node);
    node = new BasicNode(this, 1048, "Mahler%2C+Gustav",
                       20, -1.14645889132934, 2.23242141537708,
                       "Gustav Mahler, major late 19th century composer");
    nodeTable.put("1048", node);
    node = new BasicNode(this, 1061, "Mao+Zedong",
                       20, -1.03716276019214, 1.3471227531657,
                       "Mao Zedong,  founder of Chinese People's Republic");
    nodeTable.put("1061", node);
    node = new BasicNode(this, 1062, "Marconi%2C+Guglielmo",
                       20, -2.65532074381826, 2.12120780825501,
                       "Guglielmo Marconi, inventor of radio");
    nodeTable.put("1062", node);
    node = new BasicNode(this, 1076, "Marx%2C+Karl",
                       19, -2.10308766017763, 1.98583400372366,
                       "Carl Marx,  founder of communist movement");
    nodeTable.put("1076", node);
    node = new BasicNode(this, 1117, "Mesmer%2C+Franz+Anton",
                       18, 3.0112042866293, 0.202485464001562,
                       "Anton Mesmer, who invented mesmerism (hypnosis)");
    nodeTable.put("1117", node);
    node = new JourneyNodeA(this, 1168, "Mozart%2C+Wolfgang+Amadeus",
                       18, -2.04249541905595, 0.0852318075271726,
                       "Mozart, great composer");
    nodeTable.put("1168", node);
    node = new BasicNode(this, 1186, "Napoleon+Bonaparte",
                       19, 0.226070418615381, 1.89437039924568,
                       "Napoleon Bonaparte, French Emperor");
    nodeTable.put("1186", node);
    node = new BasicNode(this, 1199, "Nehru%2C+Jawaharlal",
                       20, -0.558752501968747, 2.27355127525239,
                       "Nehru, first Prime Minister of independent India");
    nodeTable.put("1199", node);
    node = new BasicNode(this, 1201, "Nelson%2C+Horatio",
                       19, 2.33414351637407, 1.07464941571663,
                       "Horatio Nelson, famous Admiral");
    nodeTable.put("1201", node);
    node = new BasicNode(this, 1217, "Nipkow%2C+Paul+Gottlieb",
                       20, -0.746281653288375, 2.77650522608203,
                       "Paul Nipkow, inventor of first TV scanning process");
    nodeTable.put("1217", node);
    node = new BasicNode(this, 1227, "Oersted%2C+Hans+Christian",
                       19, 0.963339934795313, 1.05672101525815,
                       "H C Oersted,  disoverer of electromagnetism");
    nodeTable.put("1227", node);
    node = new BasicNode(this, 1241, "Oscilloscope",
                       0, 0.426830154230566, 0.0245436926062516,
                       "Oscilloscope, device for viewing electrical signals");
    nodeTable.put("1241", node);
    node = new BasicNode(this, 1317, "Planck%2C+Max",
                       20, 0.730174855035938, 0.30027673922959,
                       "Max Planck, quantum physics pioneer");
    nodeTable.put("1317", node);
    node = new JourneyNodeI(this, 1327, "Poe%2C+Edgar+Allan",
                       19, -1.09583752532895, 1.38585576805994,
                       "Edgar Allen Poe, writer of the first detective story");
    nodeTable.put("1327", node);
    node = new BasicNode(this, 1350, "psychoanalysis",
                       0, -3.05012904910161, 3.0336387556522,
                       "Psychoanalysis, study of neurosis");
    nodeTable.put("1350", node);
    node = new BasicNode(this, 1356, "Purkinje+cells",
                       0, -3.00161690668457, 1.500616705754,
                       "Purkinje cells, type of brain cell");
    nodeTable.put("1356", node);
    node = new BasicNode(this, 1357, "Purkinje%2C+Jan+Evangelista",
                       19, 1.63445652949746, 2.89347126115869,
                       "JE Purkinje,  discoverer of Purkinje brain cells");
    nodeTable.put("1357", node);
    node = new BasicNode(this, 1358, "Quantum+physics",
                       0, -1.54644438177182, 0.389343498726489,
                       "Quantum mechanics, theory of subatomic particles");
    nodeTable.put("1358", node);
    node = new JourneyNodeJ(this, 1361, "Rachmaninov%2C+Sergey",
                       20, 2.69942269149053, 2.20375514940337,
                       "Sergey Rachmaninov, major Russian Romantic composer");
    nodeTable.put("1361", node);
    node = new BasicNode(this, 1363, "Radar",
                       0, 1.68507789549785, 1.80683762053667,
                       "Radar, detects objects using radio waves");
    nodeTable.put("1363", node);
    node = new BasicNode(this, 1364, "radio",
                       0, 0.123293705826709, 0.17544905261499,
                       "Radio, wireless information tranmission");
    nodeTable.put("1364", node);
    node = new BasicNode(this, 1365, "Radioactivity",
                       0, 2.45398576542803, 2.42675760644297,
                       "Radioactivity, subatomic particle emissions");
    nodeTable.put("1365", node);
    node = new BasicNode(this, 1383, "Reductionism",
                       0, 2.47239353488271, 1.54289705122024,
                       "Reductionism, reducing to the simplist model");
    nodeTable.put("1383", node);
    node = new BasicNode(this, 1387, "Relativity",
                       0, 3.11934993217559, 0.952026826484619,
                       "Relativity, theory of curved space-time");
    nodeTable.put("1387", node);
    node = new BasicNode(this, 1429, "Roosevelt%2C+Pres.+Franklin+Delano",
                       20, -3.05185477748799, 1.53714462326565,
                       "US President during Great Depression and WWII");
    nodeTable.put("1429", node);
    node = new BasicNode(this, 1447, "Rutherford%2C+Ernest",
                       20, 0.262694209926269, 2.79625522872612,
                       "Ernest Rutherford, who made possible quantum physics");
    nodeTable.put("1447", node);
    node = new BasicNode(this, 1464, "Schelling%2C+Frederick+Wilhelm+Joseph+von",
                       18, -2.28333040275478, 0.994211298151612,
                       "Friedrich von Schelling, Romantic philosopher");
    nodeTable.put("1464", node);
    node = new BasicNode(this, 1497, "Shaw%2C+George+Bernard",
                       20, 0.328463636207079, 0.927483133878369,
                       "GB Shaw, major 20th-century literary figure.");
    nodeTable.put("1497", node);
    node = new BasicNode(this, 1505, "Shockley%2C+William+Bradford",
                       20, 0.395191800480322, 2.41429401254136,
                       "WB Shockley, Nobel for the transistor");
    nodeTable.put("1505", node);
    node = new JourneyNodeK(this, 1517, "Sikorsky%2C+Igor+Ivanovich",
                       20, -2.65762171500009, 0.742350827539819,
                       "Igor Sikorsky,  who developed the helicopter");
    nodeTable.put("1517", node);
    node = new BasicNode(this, 1545, "Somerville%2C+Mary",
                       20, 0.8611384648021, 2.22197117125957,
                       "Mary Somerville,  major English mthematician");
    nodeTable.put("1545", node);
    node = new BasicNode(this, 1546, "Sonar",
                       0, 1.5652356464439, 2.89653922273447,
                       "Sonar, detection of objects by sound");
    nodeTable.put("1546", node);
    node = new BasicNode(this, 1548, "Sound+on+film",
                       0, 1.79322354104414, 2.37853308542366,
                       "Sound on film, revolutionized movie making");
    nodeTable.put("1548", node);
    node = new BasicNode(this, 1551, "Spaceflight",
                       0, 0.639861736148877, 0.658557127001293,
                       "Spaceflight, becomes a 20th cent. reality");
    nodeTable.put("1551", node);
    node = new BasicNode(this, 1553, "Spencer%2C+Herbert",
                       20, -2.3728765312479, 1.21414579361543,
                       "Herbert Spencer, who coined:  'survival of the fittest'");
    nodeTable.put("1553", node);
    node = new BasicNode(this, 1556, "Sperry%2C+Elmer+Ambrose",
                       20, 2.93143728565898, 2.94207927737498,
                       "Elmer Sperry, who developed the gyroscope");
    nodeTable.put("1556", node);
    node = new BasicNode(this, 1557, "Spinoza%2C+Baruch",
                       17, -2.90325038866108, 1.00523678506458,
                       "Baruch Spinoza,  major philosopher");
    nodeTable.put("1557", node);
    node = new JourneyNodeF(this, 1560, "Spurzheim%2C+Johann",
                       19, 2.81427950298384, 2.03118231076567,
                       "JG Spurzheim, co-popularizer of phrenology");
    nodeTable.put("1560", node);
    node = new BasicNode(this, 1563, "Stalin",
                       20, 1.99206580067446, 3.00113753770876,
                       "Josef Stalin, Russian leader");
    nodeTable.put("1563", node);
    node = new BasicNode(this, 1588, "Suez+Canal",
                       0, 0.766415151149853, 0.463070450344482,
                       "Suez Canal, revolutionizes European-Asian trade");
    nodeTable.put("1588", node);
    node = new BasicNode(this, 1598, "Swinton%2C+Alan+Archibald+Campbell",
                       20, 1.33571377105576, 1.59160094123577,
                       "AA Swinton, TV pioneer");
    nodeTable.put("1598", node);
    node = new BasicNode(this, 1604, "Tchaikovsky%2C+Peter+Ilich",
                       19, 2.10999057374355, 1.01961785495105,
                       "Peter Tchaikovsky,  great Russian composer");
    nodeTable.put("1604", node);
    node = new BasicNode(this, 1607, "Telephone",
                       0, 3.11340575662251, 0.0139017008902581,
                       "Telephone, revolutionizes personal communications");
    nodeTable.put("1607", node);
    node = new BasicNode(this, 1614, "Tesla%2C+Nikola",
                       20, -0.484546181354538, 1.46456815723857,
                       "Nikola Tesla, early electrical and radio pioneer");
    nodeTable.put("1614", node);
    node = new BasicNode(this, 1648, "Transistor",
                       0, 0.845223414127734, 1.36390066803325,
                       "Transistor, device that revolutionized electronics");
    nodeTable.put("1648", node);
    node = new BasicNode(this, 1662, "TV",
                       0, -1.56561914162046, 1.57760336654626,
                       "TV, wireless transmission of video");
    nodeTable.put("1662", node);
    node = new BasicNode(this, 1664, "Tykociner%2C+Joseph",
                       20, 1.00897586323506, 0.59115784613335,
                       "Joseph Tykociner, sound recording pioneer");
    nodeTable.put("1664", node);
    node = new BasicNode(this, 1689, "Verdi%2C+Giuseppe+Fortunino+Francesco",
                       19, -1.71115556887158, 2.63537899359609,
                       "Giuseppe Verdi on of the greatest opera composers of all time");
    nodeTable.put("1689", node);
    node = new BasicNode(this, 1712, "Volta%2C+Alessandro",
                       18, 1.3477938697604, 0.45118209923833,
                       "Alessandro Volta, inventor of the battery");
    nodeTable.put("1712", node);
    node = new BasicNode(this, 1713, "Voltaire%2C+Francois-Marie+Arouet+de",
                       18, 2.73566298760444, 0.435362922363208,
                       "Voltaire, one of the greatest writers");
    nodeTable.put("1713", node);
    node = new BasicNode(this, 1730, "Watson-Watt%2C+Robert",
                       20, -1.56331817043862, 1.8828655433365,
                       "Robert Watson, accepted inventor of radar");
    nodeTable.put("1730", node);
    node = new BasicNode(this, 1731, "Watt%2C+James",
                       18, -0.487805890528806, 0.0529223371822274,
                       "James Watt,  who perfected the steam engine");
    nodeTable.put("1731", node);
    node = new BasicNode(this, 1738, "Wedgwood%2C+Josiah",
                       18, -1.48316767427133, 2.03175755356113,
                       "Josiah Wedgwood,  maker of famous potter and tableware");
    nodeTable.put("1738", node);
    node = new BasicNode(this, 1743, "Wells%2C+Herbert+George",
                       20, -1.89868472019121, 2.76797245794939,
                       "HG Wells, great science fiction author");
    nodeTable.put("1743", node);
    node = new BasicNode(this, 1748, "Westinghouse",
                       19, -2.88407562881245, 1.89839709881389,
                       "Westinghouse, famous American inventor");
    nodeTable.put("1748", node);
    node = new BasicNode(this, 1800, "Zionism",
                       0, -2.32704885520967, 0.973598431314331,
                       "Zionism, Jewish fundamentalist movement");
    nodeTable.put("1800", node);
    node = new BasicNode(this, 1806, "Zworykin%2C+Vladimir+Kosma",
                       20, 1.10580840047066, 2.85914844102964,
                       "Vladimir Zworykin, TV pioneer");
    nodeTable.put("1806", node);
  }

  /**
   * Get an instance of this class.
   * Implements the singleton design pattern.
   * @return reference to only instance of this class
   */
  static public NodeData getInstance()
  {
    if (nodeData == null) nodeData = new NodeData();
    return nodeData;
  }

  /**
   * Get a node.
   * 
   * While the Node object returned is a BasicNode, the actual object is
   * likely to be a derived class object.  See the Node class references in
   * this class declaration (above). 
   * 
   * @param nodeId Node ID of node.
   * @return a Node Object or <code>null</code> if none
   */
  public BasicNode getNode(String nodeId)
  {
    try
      {
        Integer.parseInt(nodeId);
      }
    catch (NumberFormatException e)
      {
        return null;
      }
    return nodeTable.get(nodeId);
  }

  /**
   * Get a node.
   * 
   * While the Node object returned is a BasicNode, the actual object is
   * likely to be a derived class object.  See the Node class references in
   * this class declaration (above). 
   * 
   * @param nodeId Node ID of node.
   * @return an Node Object or <code>null</code> if none
   */
  public BasicNode getNode(int nodeId)
  {
    return nodeTable.get(Integer.toString(nodeId));
  }

  /**
   * Get an enumeration of all the Node objects.
   * 
   * Use the Enumeration methods on the returned object to fetch each Node
   * object sequentially.
   * 
   * @return an Enumeration object for retreiving Node objects
   */
  public Enumeration<BasicNode> elements()
  {
    return nodeTable.elements();
  }

  /**
   * Get the Node font.
   * 
   * @return get font name for nodes.
   */
  public String getNodeFontName()
  {
    if (!fontNameSet) nodeFontName = getAvailableFont();
    return nodeFontName;
  }

  /**
   * Get a good fontname
   *
   *  name of a font for node labels.
   */
  private String getAvailableFont()
  {
    java.awt.GraphicsEnvironment genv =
      java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment();
    genv.preferProportionalFonts();
    String[] names = genv.getAvailableFontFamilyNames();
    for (int i = 0; i < names.length; i++)
      {
        if (names[i].equals("Aharoni CLM")) return names[i];
        else if (names[i].equals("Century Gothic")) return names[i];
        else if (names[i].equals("URW Gothic L")) return names[i];
      }
    return "SansSerif";
  }

}

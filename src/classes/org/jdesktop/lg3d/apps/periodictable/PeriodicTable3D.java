package org.jdesktop.lg3d.apps.periodictable;

/**
  * Project Looking Glass
  *
  * $RCSfile: PeriodicTable3D.java,v $
  *
  * Copyright (c) 2006 William Tracy, All Rights Reserved
  *
  * Redistributions in source code form must reproduce the above
  * copyright and this condition.
  *
  * The contents of this file are subject to the GNU General Public
  * License, Version 2 (the "License"); you may not use this file
  * except in compliance with the License. A copy of the License is
  * available at http://www.opensource.org/licenses/gpl-license.php.
  * 
  */

import java.awt.*;
import java.awt.image.*;

import java.io.*;
import java.net.*;

import javax.swing.*;

import javax.imageio.*;
import javax.imageio.stream.*;

import javax.vecmath.*;

import org.jdesktop.lg3d.sg.*;
import org.jdesktop.lg3d.wg.*;
import org.jdesktop.lg3d.wg.event.*;

import org.jdesktop.lg3d.utils.shape.*;
import org.jdesktop.lg3d.utils.layoutmanager.*;
import org.jdesktop.lg3d.utils.c3danimation.*;
import org.jdesktop.lg3d.utils.eventadapter.*;
import org.jdesktop.lg3d.utils.action.*;
import org.jdesktop.lg3d.utils.animation.*;
import org.jdesktop.lg3d.utils.eventaction.*;



/** <p>A three-dimensional periodic table of the elements.</p>
  * <p>Current usage is:</p>
  * <ul>
  * <li>LMB click and drag to move.</li>
  * <li>LMB double-click to toggle 3D mode.</li>
  * <li>MMB click to park at the edge of the screen.</li>
  * <li>RMB click to minimize.</li>
  * <li>RMB click and drag to rotate.</li>
  * <li>Mousewheel zooms the application.</li>
  * </ul>
  * @author William Tracy
  *
  */
public class PeriodicTable3D {
  /** Factor for converting pixels to Java3D units. Works on my computer. (shrug)
    */
  public static final float SCALE = 0.001f;

  /** Generates temp files for ImagePanels.
    */
  static ImageFactory factory;

  /** The application's main frame.
    */
  Frame3D frame3D;
  /** The component that displays the application's thumbnail.
    */
  Component3D thumbComponent;
  Component3D innerThumbComponent;
  /** The component that displays all the elements except the inner transition
    * elements.
    */ 
  Component3D component;
  /** The component that displays the left half of the inner transition
    * elements.
    */
  Component3D innerComponent1;
  /** The component that displays the right half of the inner transition
    * elements.
    */
  Component3D innerComponent2;

  /** The application's current zoom factor.
    */
  float scale = 1f;
  
  /** True if "3D mode" has been toggled, aligning the inner transition
    * elements along the Z axis.
    */
  boolean mode3D = false;
  
  /** Container for the periodic table components.
    */
  Container3D leaf;
  
  /** Remembers the angle that the periodic table interface was rotated to
    * before being docked.
    */
  float angle = 0f;
  
  /** Remembers the axis of rotation of the periodic table interface prior to
    * being docked.
    */
  Vector3f axis = new Vector3f();

  /** Initializes the ImageFactory.
    */
  static {
    try {
      factory = new ImageFactory();
    } catch (IOException e) {
      showErrorMessage("PeriodicTable3D couldn't create a temp file!", e);
    }
  }
  
  /** Starts the creation of a new PeriodicTable3D.
    * @param args
    */
  public static void main(String[] args) {
    try {
      new PeriodicTable3D();
    } catch (FileNotFoundException e) {
      showErrorMessage("PeriodicTable3D couldn't find the temp file!", e);
    } catch (IOException e) {
      showErrorMessage("PeriodicTable3D had a problem reading a temp file.",
                       e);
    }
  }

  /** Displays an error message. A <tt>JOptionPane</tt> is wrapped in a
    * <tt>JFrame</tt> and displayed, since LG3D currently doesn't support
    * <tt>JDialogs</tt>. Unfortunately, this breaks the "OK" button; the user is
    * forced to click the "X" close button to dismiss the dialog.
    *
    * @param s A string the describes what may have caused the <tt>Exception</tt>.
    * @param e The <tt>Exception</tt> in question.
    */
  public static void showErrorMessage(String s, Exception e) {
    e.printStackTrace();
    JFrame frame = new JFrame("PeriodicTable3D");
    frame.setContentPane(new JOptionPane(s + "\n" + e.toString(),
                                         JOptionPane.ERROR_MESSAGE));
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.pack();
    frame.show();
  }

  /** Creates an instance of <tt>PeriodicTable3D</tt>. Creation of the main frame is
    * delegated to <tt>setupFrame3D()</tt>, but the thumbnail is generated by this
    * method.
    */
  public PeriodicTable3D() throws FileNotFoundException,
                                  IOException {
    setupFrame3D();

    Thumbnail thumb = new Thumbnail();
    thumb.setPreferredSize(new Vector3f(0.01f, 0.01f, 0.005f));
    thumbComponent = new Component3D();
    innerThumbComponent = new Component3D();
    thumb.addChild(thumbComponent);
    thumb.addChild(innerThumbComponent);
    thumbComponent.addChild(new ImagePanel(factory.getThumbnailImageFile(),
                                           0.01f, 
                                           0.005f));
    innerThumbComponent.addChild(new ImagePanel(factory.getThumbnailInnerImageFile(),
    											0.005f,
    											-0.00125f));
    thumbComponent.setAnimation(new NaturalMotionAnimation(1000));
    innerThumbComponent.setAnimation(new NaturalMotionAnimation(1000));
    thumbComponent.setTranslation(0f, 0f, -0.0025f);
    innerThumbComponent.setTranslation(-0.005f, -0.0025f, 0f);
    innerThumbComponent.setRotationAxis(0f, 1f, 0f);
    innerThumbComponent.setRotationAngle((float)Math.PI / 2f);
    frame3D.setThumbnail(thumb);

    frame3D.addListener(new MouseEnteredEventAdapter(
      new ActionBoolean() {
        public void performAction(LgEventSource source,
                                  boolean state) {
          if (state) {
            thumbComponent.changeTranslation(0f,
                                             0.005f,
                                             -0.00125f);
            innerThumbComponent.changeTranslation(-0.005f, 0.0025f, 0f);
          } else {
            thumbComponent.changeTranslation(0f, 0f, -0.00125f);
            innerThumbComponent.changeTranslation(-0.005f, -0.0025f, 0f);
          }
        }
    }));

    frame3D.changeEnabled(true);
    frame3D.changeVisible(true);

    component.changeTranslation(0f, 0.05f, 0f);
    try {
      Thread.sleep(300);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    innerComponent1.changeTranslation(-7f * 7f * SCALE, -0.05f, 0.0f);
    innerComponent2.changeTranslation(07f * 7f * SCALE, -0.05f, 0f);
  }

  /** Creates the PeriodicTable3D frame.
    */
  void setupFrame3D() throws FileNotFoundException,
                             IOException {
    frame3D = new Frame3D();

    leaf = new Container3D();
    leaf.setAnimation(new NaturalMotionAnimation(2000));

    component = createComponent();
    leaf.addChild(component);

    innerComponent1 = createInnerComponent1();
    leaf.addChild(innerComponent1);
	innerComponent1.setRotationAxis(0, 1, 0);
    
    innerComponent2 = createInnerComponent2();
    leaf.addChild(innerComponent2);
    innerComponent2.setRotationAxis(0, 1, 0);

    frame3D.addListener(
      new MouseClickedEventAdapter(
        MouseEvent3D.ButtonId.BUTTON3,
        new ActionFloat2() {
          public void performAction(LgEventSource source, float x, float y) {
            frame3D.changeVisible(false);
          }
        }));

    frame3D.addListener(new Component3DRotator(leaf, InputEvent3D.ModifierId.BUTTON3));
    frame3D.addListener(new Component3DParkedEventAdapter(new ActionBoolean() {
        public void performAction(LgEventSource source, boolean state) {
            if (state) {
                axis = leaf.getRotationAxis(axis);
                angle = leaf.getRotationAngle();
                leaf.changeRotationAngle(0f);
            } else {
                leaf.changeRotationAxis(axis);
                leaf.changeRotationAngle(angle);
            }
        }
    }));

    frame3D.addListener(
    	new MouseClickedEventAdapter(
    			MouseEvent3D.ButtonId.BUTTON1,
    			true,
    			null,
    			new ActionNoArg() {
    				public void performAction(LgEventSource source) {
    					mode3D = !mode3D;
    					if (mode3D) {
	    					innerComponent1.changeRotationAngle(-(float)Math.PI/2);
	    					innerComponent2.changeRotationAngle((float)Math.PI/2);
	    					
	    					innerComponent1.changeTranslation(-.0001f - 6f * 14f * SCALE, -17f * 2.5f * SCALE, 0f);
	    					innerComponent2.changeTranslation(0.0001f - 6f * 14f * SCALE, -17f * 2.5f * SCALE, 0f);
	    					component.changeTranslation(0f, 0f, -7f * 7f * SCALE);
    					} else {
                                            innerComponent1.changeTranslation(-7f * 7f * SCALE, -0.05f, 0.0f);
	    				    innerComponent2.changeTranslation(07f * 7f * SCALE, -0.05f, 0f);
	    				    component.changeTranslation(0f, 0.05f, 0f);

                                            innerComponent1.changeRotationAngle(0);
                                            innerComponent2.changeRotationAngle(0);
    					}
    				}
    			}
    			));
    
    frame3D.addListener(new MouseWheelEventAdapter(new ActionInt() {
      public void performAction(LgEventSource source, int value) {
        if (value == 1) {
          if (scale > 0.25f)
            scale -= 0.1f;
        } else {
          scale += 0.1f;
        }
        frame3D.changeScale(scale);
      }
    }));
    frame3D.addChild(leaf);
    
    frame3D.setPreferredSize(
    		new Vector3f(18f * 14f * SCALE, 0.1f + 7f / 2f * 17f * SCALE, 7f * 14f * SCALE));
  }

  /** Creates the main component. The component is responsible for displaying all
    * elements except the inner transition elements.
    * @throws FileNotFoundException if <code>ImageFactory</code> cannot retrieve the 
    *                               correct image file.
    * @throws IOException if the image file cannot be opened.
    * @return the component.
    */
  Component3D createComponent() throws FileNotFoundException, 
                                       IOException {
    Component3D comp = new Component3D();
    comp.setAnimation(new NaturalMotionAnimation(2000));
    comp.addChild(new ImagePanel(factory.getImageFile(),
                           18 * 14f * SCALE,
                           7 * 17f * SCALE));

    return comp;
  }

  /** Creates the left inner transition elements component.
    * @throws FileNotFoundException if <code>ImageFactory</code> cannot retrieve the 
                                    correct image file.
    * @throws IOException if the image file cannot be opened.
    * @return the component.
    */
  Component3D createInnerComponent1() throws FileNotFoundException,
                                            IOException {
    Component3D innComp = new Component3D();
    innComp.setAnimation(new NaturalMotionAnimation(2000));

    innComp.addChild(new ImagePanel(factory.getInnerImageFile1(),
                                    7 * 14f * SCALE,
                                    2 * 17f * SCALE));

    return innComp;
  }
  
  /** Creates the right inner transition elements component.
   * @throws FileNotFoundException if <code>ImageFactory</code> cannot retrieve the 
                                   correct image file.
   * @throws IOException if the image file cannot be opened.
   * @return the component.
   */
 Component3D createInnerComponent2() throws FileNotFoundException,
                                           IOException {
   Component3D innComp = new Component3D();
   innComp.setAnimation(new NaturalMotionAnimation(2000));

   innComp.addChild(new ImagePanel(factory.getInnerImageFile2(),
                                   7 * 14f * SCALE,
                                   2 * 17f * SCALE));

   return innComp;
 }
}
